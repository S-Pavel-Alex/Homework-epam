"""
Write a function that gets file path as an argument.
Read the first line of the file.
If first line is a number return true if number in an interval [1, 3)*
and false otherwise.
In case of any error, a ValueError should be thrown.

Write a test for that function using pytest library.
You should create files required for the testing inside the test run and
remove them after the test run.
(Opposite to previous homeworks when you used files created manually before
 the test.)

Definition of done:
 - function is created
 - function is properly formatted
 - function has positive and negative tests
 - tests do a cleanup and remove remove files generated by tests

You will learn:
 - how to test Exceptional cases
 - how to clean up after tests
 - how to check if file exists**
 - how to handle*** and raise**** exceptions in test. Use sample from the
  documentation.

* https://en.wikipedia.org/wiki/Interval_(mathematics)#Terminology
** https://docs.python.org/3/library/os.path.html
*** https://docs.python.org/3/tutorial/errors.html#handling-exceptions
**** https://docs.python.org/3/tutorial/errors.html#raising-exceptions
"""
import os

import pytest


@pytest.fixture()
def read_magic_number(path: str) -> bool:
    try:
        with open(path, 'w') as text:
            text.write(input())
        with open(path) as text:
            for line in text:
                return 1 <= float(line) < 3
    except Exception as err:
        raise ValueError(f'Error occured: {err}') from err
    yield
    os.remove(path)


def test_read_magic_number(read_magic_number):
    """This test show positive resault for element
    in range [1, 3)"""
    assert read_magic_number is True


@pytest.fixture()
def a_tuple():
    """Вернуть что-нибудь более интересное"""
    return (1, 'foo', None, {'bar': 23})

def test_a_tuple(a_tuple):
    """Demo the a_tuple fixture."""
    assert a_tuple[3]['bar'] == 23